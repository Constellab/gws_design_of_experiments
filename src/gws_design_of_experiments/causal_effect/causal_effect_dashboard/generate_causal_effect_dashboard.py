import os
import json
from gws_core import (ConfigParams, AppConfig, AppType, OutputSpec,
                      OutputSpecs, StreamlitResource, Task, TaskInputs,
                      TaskOutputs, app_decorator, task_decorator,
                      InputSpecs, ConfigSpecs, Folder, InputSpec)

@app_decorator("CausalEffectDashboardDashboard", app_type=AppType.STREAMLIT,
               human_name="Generate AppConfig")
class CausalEffectDashboard(AppConfig):

    # retrieve the path of the app folder, relative to this file
    # the dashboard code folder starts with a underscore to avoid being loaded when the brick is loaded
    def get_app_folder_path(self):
        return self.get_app_folder_from_relative_path(__file__, "_causal_effect_dashboard")


@task_decorator("GenerateCausalEffectDashboard", human_name="Generate causal effect dashboard app",
                style=StreamlitResource.copy_style())
class GenerateCausalEffectDashboard(Task):
    """
    Task that generates an interactive Streamlit dashboard for visualizing and exploring
    causal effect analysis results from the CausalEffect task.

    This task creates a dashboard that allows users to interactively explore
    the Conditional Average Treatment Effects (CATE) computed by the CausalEffect task.
    The dashboard provides multiple visualization modes and filtering options to help
    understand the causal relationships in your data.

    **What this task does:**
    - Takes the results folder from a CausalEffect task as input
    - Generates an interactive Streamlit application
    - Provides multiple visualization tabs for exploring causal effects
    - Allows dynamic filtering and selection of results
    - Displays heatmaps, bar plots, and clustermaps of causal effects

    **Input Requirements:**
    - **folder**: The results folder generated by a CausalEffect task, containing, for each target variable combination:
      - CSV files with causal effect estimates
      - PNG heatmap files

    **Dashboard Features:**
    The generated dashboard includes:

    1. **Interactive Filters:**
       - Choose target variable combinations to display
       - Filter treatments (automatically excludes treatments with zero effects)
       - Select specific targets within combinations

    2. **Visualization Tabs:**
       - **ðŸ“Š Heatmap**: Interactive color-coded matrix showing treatment effects
       - **ðŸ“‰ Barplot**: Grouped bar chart comparing effects across treatments and targets
       - **ðŸ§© Clustermap**: Hierarchically clustered heatmap for pattern discovery

    3. **Data Transformations:**
       - Automatic log transformation of effect sizes for better visualization
       - Color scaling centered around zero to highlight positive/negative effects
       - Statistical filtering to focus on meaningful non-zero effects

    **Output:**
    - **streamlit_app**: A StreamlitResource

    **Usage Workflow:**
    1. Run CausalEffect task on your data to generate causal effect estimates
    2. Connect the results folder to this GenerateCausalEffectDashboard task
    3. Launch the generated Streamlit app to interactively explore your results
    4. Use the dashboard to identify significant causal relationships and patterns

    """

    input_specs = InputSpecs({'folder': InputSpec(Folder)})
    output_specs = OutputSpecs({
        'streamlit_app': OutputSpec(StreamlitResource)
    })

    config_specs = ConfigSpecs({})

    def run(self, params: ConfigParams, inputs: TaskInputs) -> TaskOutputs:
        """ Run the task """

        streamlit_app = StreamlitResource()

        # set the input in the streamlit resource
        folder: Folder = inputs.get('folder')

        # Create settings.json if it doesn't exist
        settings_path = os.path.join(folder.path, "settings.json")
        if not os.path.exists(settings_path):
            # Get all subdirectories in the folder
            subfolders = [name for name in os.listdir(folder.path)
                         if os.path.isdir(os.path.join(folder.path, name))]

            # Create settings dictionary with subfolder names as keys and values
            settings = {subfolder: subfolder for subfolder in subfolders}

            # Write settings.json file
            with open(settings_path, 'w') as f:
                json.dump(settings, f, indent=2)

        streamlit_app.add_resource(folder, create_new_resource=False)

        streamlit_app.set_app_config(CausalEffectDashboard())
        streamlit_app.name = "Dashboard of Conditional Average Treatment Effect (CATE)"

        return {"streamlit_app": streamlit_app}
